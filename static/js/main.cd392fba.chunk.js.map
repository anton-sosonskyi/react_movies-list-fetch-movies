{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","INITIAL_STATE","FindMovie","addMovie","isInList","useState","setMovie","isLoading","setIsLoading","isFound","setIsFound","isError","setIsError","isTyping","setIsTyping","setQuery","normalizeData","data","Title","Plot","Poster","imdbID","handleSubmit","event","preventDefault","dataFromServer","normalizedData","onSubmit","htmlFor","value","onChange","target","type","id","placeholder","cn","disabled","onClick","movieToAdd","App","setMovies","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd392fba.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=c056a4c9';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { getMovie } from '../../api';\nimport './FindMovie.scss';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\n\nconst INITIAL_STATE: Movie = {\n  title: '',\n  description: '',\n  imdbUrl: '',\n  imgUrl: '',\n  imdbId: '',\n};\n\ntype Props = {\n  addMovie: (movie: Movie) => void,\n  isInList: (imdbId: string) => boolean,\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie, isInList }) => {\n  const [movie, setMovie] = useState<Movie>(INITIAL_STATE);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFound, setIsFound] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const normalizeData = (data: MovieData): Movie => {\n    const {\n      Title, Plot, Poster, imdbID,\n    } = data;\n    const imdbUrl = `https://www.imdb.com/title/${imdbID}`;\n    const imgUrl = (Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : Poster);\n\n    return {\n      title: Title,\n      description: Plot,\n      imdbId: imdbID,\n      imgUrl,\n      imdbUrl,\n    };\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n    setIsFound(false);\n    setIsTyping(false);\n    setIsError(false);\n\n    try {\n      const dataFromServer = await getMovie(query);\n\n      if ('Error' in dataFromServer) {\n        setIsError(true);\n\n        return;\n      }\n\n      const normalizedData = normalizeData(dataFromServer);\n\n      setMovie(normalizedData);\n      setIsFound(true);\n    } catch {\n      throw new Error('Failed movie load');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAdd = (movieToAdd: Movie) => {\n    if (!isInList(movieToAdd.imdbId)) {\n      addMovie(movieToAdd);\n    }\n\n    setMovie(INITIAL_STATE);\n    setIsFound(false);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={event => handleSubmit(event)}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              value={query}\n              onChange={event => {\n                setQuery(event.target.value);\n                setIsTyping(true);\n              }}\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n            />\n          </div>\n\n          {(isError && !isTyping) && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn(\n                'button', 'is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={!query}\n            >\n              {isFound ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {isFound && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAdd(movie)}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n      {isFound && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const onAdd = (movie: Movie) => setMovies([...movies, movie]);\n  const isAlreadyInList = (imdbId: string) => {\n    return movies.some(movie => movie.imdbId === imdbId);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={onAdd}\n          isInList={isAlreadyInList}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}